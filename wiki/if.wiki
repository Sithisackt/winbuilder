=If Clauses =

In the !WinBuilder script language you can use the `If` statement to evaluate certain conditions and create conditional branches of execution.
If a condition is true when you test it with the IF command then a command will be executed.  The general format of this command is: 
{{{
If,<condition>,<command>
}}}
Starting with WB076, the ability to have an alternate command executed was added by following the `If` statement with an optional `else` command. If a condition is false when you test it with the `IF` command then the  command following the `Else` keyword will be executed.
 * Note: The `Else` command must follow the If command immediately.
{{{
If,<Condition>,<Command>
Else,<Command>
}}}
In the following example we are testing if `c:\myFile.txt` does not exist. If this is true, then `FileCreateBlank,c:\myFile.txt` will be executed, otherwise a message windows with the text `File already exists` appears.
{{{
If,Not,ExistFile,C:\myFile.txt,FileCreateBlank,C:\myFile.txt
Else,Message,"File already exists",INFORMATION
}}}
This is a very powerful construct, since the `<command>` specified can be
*ANY* valid script command.  This was further enhanced with the addition of command blocks using [begin_end Begin / End], which allows multiple commands to be executed. 

====List of available IF conditions====
 * [if#Exist...  Exist... / NotExist...]
 * [if#Equal Equal / Smaller / Bigger / NotEqual]
 * [if#Ping Ping]
 * [if#Online Online]
 * [if#License License / NotLicense]
 * [if#Not Not]
 * [if#Question Question]
<br>
<br>
----

=Exist...=
=!NotExist...=
You can use these tests to determine if a file, directory, script section, or variable does or does not exist. If this test is true, then a Command is executed. 
 Avaialable tests include:
|| *FILE:* || !ExistFile || !NotExistFile||
|| *DIRECTORY:* || !ExistDir || !NotExistDir||
|| *SECTION:* || !ExistSection || !NotExistSection||
|| *REGISTRY:* || !ExistRegSection || !NotExistRegSection ||
|| || !ExistRegKey || !ExistRegKey||
|| *VARIABLE:* || !ExistVar || !ExistVar ||

==Syntax==
{{{
If,EXISTFILE,TestFile,Command
If,EXISTDIR,Directory,Command
If,EXISTSECTION,TestFile,Section,Command
If,EXISTVAR,%Var%,Command
}}}

== Example: ==
In this given example we are testing if `c:\myFile.txt` does not exist. If this condition is true, then `FileCreateBlank,c:\myFile.txt` will be executed
{{{
If,NotExistFile,c:\myFile.txt,FileCreateBlank,c:\myFile.txt
}}}
This command will read the value of `HKLM\SOFTWARE\Classes\xyz,Language`, if `RegSection HKLM\SOFTWARE\Classes\xyz`  does exist.
{{{
If,ExistRegSection,HKLM,SOFTWARE\Classes\xyz,RegRead,HKLM,SOFTWARE\Classes\xyz,Language,%var%
}}}
This command will read the value of `HKLM\SOFTWARE\Classes\xyz,Language`, if the registry key `HKLM\SOFTWARE\Classes\xyz,Language`  does exist.
{{{
If,ExistRegKey,HKLM,SOFTWARE\Classes\xyz,Language,RegRead,HKLM,SOFTWARE\Classes\xyz,Language,%var%
}}}
In this given example we will check if the program path `C:\Program Files\IrfanView` does exist, if it is true, the value of %Var% will be set to 1. Then we will check if %Var% does exist, if it is true a message windows with text "1 does exist" appears.
{{{
Set,%var%,NIL
If,ExistDir,C:\Program Files\IrfanView,Set,%Var%,1
If,ExistVar,%var%,Message,"'%var%' does exist",Information 
}}}


<br>
----
=Equal=
=Smaller / Bigger / !NotEqual=

This set of `IF` clauses can compare numeric values as well as text strings.
{{{
If,<%var%>,<test>,<value>,<Command> 
}}}
For comparing text strings, WB078 added `EqualX` which does a case sensitive comparison.

== Example ==
In this given example we are testing if `%myVariable%` is equal to 10. If this condition is true then `FileCreateBlank,c:\myFile.txt` will be executed
{{{
If,%myVariable%,Equal,10,FileCreateBlank,c:\myFile.txt
}}}


<br>
----
=Ping=

Ping will test if a given IP is valid and run a command if this test is true.
{{{
If,ping,<xxx.xxx.xxx.xxx>,<Command> 
}}}
== Example: ==
In this given example we are pinging a machine on the network. If this condition is true then `FileCreateBlank,c:\myFile.txt` will be executed. WB078 added the ability to use a hosts domain name in addition to the IP address.
{{{
If,ping,10.111.8.1,FileCreateBlank,c:\myFile.txt
If,ping,winbuilder.net,FileCreateBlank,c:\myFile.txt
}}}



<br>
----
=Online=

This command will test if the computer is online and run a command if this test is true.
{{{
If,online,<Command> 
}}}

== Example: ==
{{{
If,online,FileCreateBlank,c:\myFile.txt
}}}


<br>
----
=License=
=!NotLicense=

This command was added to be used as tool to accept a license agreement whenever needed. It will open a special tab where the user has the option to read the terms of the license and then press a button corresponding to his decision to agree or not with the displayed terms.
{{{
If,License,<textfilename>,<Command> 
}}}

 Here, `TextFilename` is the text file that will be displayed on the license window.

The use of `License` runs the command when the user agrees with the license conditions and `NotLicense` will cause the command to run if the user doesn't agree.

== Example: ==
This example will present the contents of myEula.txt - in case the user doesn't agree with this license the project build will be aborted.
{{{
If,NotLicense,c:\myEULA.txt,halt,"User doesn't agree with license."
}}}



<br>
----
=Not=

This syntax was introduced to simplify the addition of future conditions.  It basically changes the "sense" of the check from true to false. 
 In other words, the statement `If,Not,%var1%,EQUAL,%var2%,command` is equivalent to `If,%var1%,NOTEQUAL,%var2%,command`.
{{{
If,Not,<Condition>,<Command>
}}}

== Example: == 
{{{
If,Not,%var1%,EQUAL,%var2%,FileCreateBlank,C:\myFile.txt
}}}



<br>
----
=Question=

Asks the user a question, and uses their response to determine if the command should be executed. Note: all strings defined in the language files can be used like variables, identified by their ID number $#nnnn.
{{{
If,QUESTION,<Question>,<Command>
}}}

*WB076 added:*
 Usually the question dialog waits for the user's input. Using these optional parameters, you can cause to close it after a timeout ( and supply a default response), by adding the timeout (in seconds) and a default answer (Yes / No) as last arguments. 
{{{
If,QUESTION,"Exit Script?",Exit,"User decided",10,yes
}}}

== Example: == 
{{{
If,QUESTION,$#1541?,command 
}}}
Here, we are using an internal string to display a question (The question mark is part of the TEXT, not part of the ID!). The resulting dialog box shows in case of default language (English):
{{{
Save changes to disk?
}}}
In case of e.g. italian language:
{{{
Salva cambiamenti al disco?
}}}