=String Formatting=
!WinBuilder has some string formatting capabilities which are documented below.

 * [strformat#INC/DEC/MULT/DIV  INC / DEC / MULT / DIV ]
 * [strformat#FILENAME/PATH/EXT    FILENAME / PATH / EXT ]
 * [strformat#BYTES    BYTES ]
 * [strformat#DATE    DATE ]
 * [strformat#CEIL/FLOOR    CEIL / FLOOR ]
 * [strformat#LTRIM/RTRIM/CTRIM/NTRIM    LTRIM / RTRIM / CTRIM / NTRIM ]
 * [strformat#LEFT/RIGHT    LEFT / RIGHT ]
 * [strformat#REPLACE/REPLACEX    REPLACE / REPLACEX ]
 * [strformat#SPLIT    SPLIT]
 * [strformat#SHORTPATH/LONGPATH    SHORTPATH / LONGPATH]
 * [strformat#CHARTOOEM/OEMTOCHAR    CHARTOOEM / OEMTOCHAR]
 * [strformat#LEN    LEN]
 * [strformat#POS    POS]
----

=INC/DEC/MULT/DIV=
==Syntax==
{{{
StrFormat,<Action>,<%var%>,<n>
}}}
This option is used to modify the value of a given number based on the arithmetic operation you select. It's also important to specify the value to use to perform this operation (*only positive values*). 

The result is written back to the variable (%var%).  *Note: negative numbers are supported by this variable value, but can not be used as constant arguments to the command.*

List of possible Action values
 * inc - increase (%var% + n)
 * dec - decrease (%var% - n)
 * mult - multiply (%var%  `*` n )
 * div - division (%var% / n)
where *n* is the last parameter on this command and should always be a numeric value.

== Example: ==
In this example we have a variable called `%LoopAgain%` with a value of 10. Once we increase the value of this value with the last parameter of this command we will get the same variable `%LoopAgain%` with a value of 15. This same example applies for all other available actions.
{{{
StrFormat,Inc,%LoopAgain%,5
}}}

<br>
<br>
----
=FILENAME/PATH/EXT=
==Syntax==
{{{
StrFormat,<Action>,<Filename>,<%VarResult%> 
}}}

This option is used to extract specific information from the given text related to filenames.

List of possible Action values
 * Filename - returns the filename portion (no path)
 * Path - gives the path of the given text
 * Ext - outputs only the extension of the filename

== Example: == 
{{{
Set,%DownloadURL1%,http://live.sysinternals.com/Bginfo.exe
StrFormat,PATH,%DownloadURL1%,%var1%
StrFormat,FILENAME,%DownloadURL1%,%var2%
StrFormat,EXT,%DownloadURL1%,%var3%
}}}
which results in
{{{
%var1%=http://live.sysinternals.com/
%var2%=Bginfo.exe
%var3%=.exe 
}}}

<br>
<br>
----
=BYTES=
==Syntax==
{{{
StrFormat,bytes,<%VarResult%> 
}}}
This option is used to convert a specific number of bytes from the given text to a more human readable format. Any amount of bytes specified will be converted to Kb, Mb, Gb and Tb.

== Example: ==
{{{
StrFormat,bytes,1440000,%myVar%
}}}
In this example %myVar% will contain "1.44Mb "

<br>
<br>
----
=DATE=
==Syntax==
{{{
StrFormat,Date,<%var%>,<yyyy-mmm-dd hh:nn am/pm> 
}}}

This option is used to retrieve the current hour and date and output it to a variable using the format you prefer.
 * yyyy - year in 4 digit
 * mmm - 3 initial letters of the month
 * dd - day number
 * hh - hour number
 * nn - minute number
 * am/pm indicates to use 12 hours cycle instead of 24 hours 
The last parameter will define the way these values will be written to your variable. You can omit values that aren't needed and even add custom text inside.

== Example: ==
In this example %myVar% will output the current year, month and day formatted as specified (eg. 2007-jun-07)
{{{
StrFormat,date,%myVar%,yyyy-mmm-dd
}}}


<br>
<br>
----
=CEIL/FLOOR=
==Syntax==
{{{
StrFormat,<Action>,<%var%>,<%size%>
}}}
These functions will round up or down the variables value as specified to the nearest "size".  Here "size" may be:
 * number (e.g. 512)
 * the character 'k' meaning 1024 (i.e. = kilobyte)
 * the character 'm' meaning 1024  * 1024 (i.e. = megabyte)

The action selected is either:
 * Ceil = round up
 * Floor = round down

== Example: == 
In this given example we are rounding up the value of %var% to the next multiple of %size%. The result is written back into %var% with the value of 40.
{{{
Set,%var%,37
Set,%size%,10
StrFormat,CEIL,%Var%,%size%
}}}

<br>
<br>
----
=LTRIM/RTRIM/CTRIM/NTRIM=
==Syntax==
{{{
StrFormat,<Action>,<%string%>,<CharsToTrim>,<%var%>
}}}
These commands will trim off characters from the specified sting (or variable that contains a string) and out the result into the %var% specified. The action values are:
 * LTrim - trim from the left
 * RTrim - trim from the right
 * CTrim - trim a matching character
 * NTrim - trim any numbers from the string

== Example: == 
In this example we have a given string tomorrow� and we trim 3 chars from the left. The remaining rest is filled into %var% with value orrow.
The same syntax applies for StrFormat,RTRIM trimming 3 chars from the right resulting as tomor.
{{{
Set,%string%,tomorrow
StrFormat,LTRIM,%string%,3,%var%
}}}
----

CTRIM is used to trim the first and/or the last char of a given string, *_BUT ONLY_ if the char to trim is matching with the first and/or the last char of the string.* If the char does not exist at the front or end of the string, it remains unchanged.

In this example we trim the backslash of given string `Programs\` with the result `Programs` being written into %var%.
{{{
Set,%string%,Programs\
StrFormat,CTRIM,%string%,\,%var%
}}}
----
NTRIM is used to trim numbers from the end of a string. For example, it can be used to extract the class name from interface components.
Here %var% will contain: `pTextBox` after this code is executed.
{{{
StrFormat,NTRIM,pTextBox12,%var%
}}}

<br>
<br>
----
=LEFT/RIGHT=
==Syntax==
{{{
StrFormat,<Action>,<%string%>,<CharsToObtain>,<%var%>
}}}
This command gets a specified number of characters from the left or right end of a given variables content.

== Example: == 
In this example we have a given string tomorrow  and we want to get 3 chars from the left filled into %var1% with value `tom`, and 3 characters into %var2% (using `StrFormat,RIGHT`) with result row.
{{{
Set,%string%,tomorrow
StrFormat,LEFT,%string%,3,%var1%
StrFormat,Right,%string%,3,%var2%
}}}


<br>
<br>
----
=MID=
==Syntax==
{{{
StrFormat,MID,<%string%>,<PositionOfFirstChar>,<CharsToObtain>,<%var%>
}}}
This command pulss a given number of characters out of the "middle" of a string

== Example: == 
In this example we have a given string tomorrow  and we want to get 4 chars beginning with the third char. The result is filled into %var% with value `morr`.
{{{
Set,%string%,tomorrow
StrFormat,MID,%string%,3,4,%var%
}}}


<br>
<br>
----
=REPLACE/REPLACEX=
==Syntax==
{{{
StrFormat,REPLACE,<%string%>,<CharsToReplace>,<ReplacementChars>,
<%VarResult%>
}}}
Will "replace" a given number of characters inside a given string.  There is also a case sensitive version of this command (`REPLACEX`)

== Example: == 

{{{
Set,%a%,BROWN
Set,%b%,yellow
Set,%source%,"The quick brown fox jumps over the lazy dog"
StrFormat,REPLACE,%source%,%a%,%b%,%VarResult%
StrFormat,REPLACEX,%source%,%a%,%b%,%VarResultSens%
}}}
 In the first example we replace (case insensitive) brown by yellow resulting in new string being written to %VarResult%:
{{{
The quick yellow fox jumps over the lazy dog
}}}
 In the second command, there is nothing replaced, because uppercase brown is not found, resulting the original string being placed into %VarResultSens%: - i.e.
{{{
The quick brown fox jumps over the lazy dog
}}}

<br>
<br>
----
=SPLIT=
==Syntax==
{{{
StrFormat,SPLIT,<%string%>,<DelimiterChar>,<Index>,<%VarResult%>
}}}
This command is used with the [loop Loop] command to split up a given string and act on the individual components.
 (Index=0 --> number of items)

*_THIS NEED MORE WORK TO EXPLAIN _*

== Example: == 
{{{
Set,%source%,�The quick brown fox jumps over the lazy dog�
StrFormat,SPLIT,%source%,#$s,0,%count%
Loop,%ScriptFile%,Section,1,%count%

[Section]
StrFormat,SPLIT,%source%,#$s,#c,%VarResult%
}}}
In this example we split the string "The quick brown fox jumps over the lazy dog" using the delimiter space (in it's escaped form #$s) and get the single words in the separate loop passes.


<br>
<br>
----
=SHORTPATH/LONGPATH=
==Syntax==
{{{
StrFormat,<Action>,<%string%>,<%VarResult%>
}}}
This command will take a string and return either the "DOS 8.3" (i.e. ShortPath) path or the Longer, NT style path (LongPath).

<br>
<br>
----
=CHARTOOEM/OEMTOCHAR=
==Syntax==
{{{
StrFormat,<Action>,<%string%>,<%VarResult%>
}}}
These functions convert between the ANSI charset and the DOS charset, and are useful when dealing with special characters like "umlauts" and other similar markings. Action can be either
 * `CharToOEM` or
 * `OemToChar`


<br>
<br>
----
=LEN=
==Syntax==
{{{
StrFormat,LEN,<%string%>,<%VarResult%>
}}}
Returns the number of characters in the string

== Example: == 
there are 11 characters in the given string (which would be the value of %var1%
{{{
StrFormat,LEN,"Hello World",%var1%
}}}



<br>
<br>
----
=POS=
==Syntax==
{{{
StrFormat,POS,<String>,<SubString>,<%VarResult%>
}}}
find the position of the given SubString inside the specified String and return the result in %VarResult%

==Example: == 
In this example we verify the position of (case insensitive) 'orl' in 'Hello World' with result 8.
{{{
StrFormat,POS,"Hello World",orl,%VarResult%
}}}
In this example we verify the position of lowercase 'l' in 'HELLO World' with result 10.
{{{
StrFormat,POSX,"HELLO World",l,%VarResult%
}}}