=File Operations=
Commands under this category were designed to handle files and are particularly useful to create the base structure of your project or add additional features that you need.

List of available functions
 * [FileCopy]
 * FileDelete
 * FileRename
 * FileCreateBlank
 * FileByteExtract

 * DirCopy
 * DirDelete
 * DirMove
 * DirMake
 * CopyOrExpand
 * Expand

.

----

=FileCopy=

*{{{FileCopy,<FromFile>,<ToDir>}}}*

This command will copy a single source file to a specified destination.
If the destination is a folder name, the file is copied there.
If the destination is a file name, the file is copied into the destination folder and finally renamed.

The command uses Win32 API as a silent operation overwriting any previously existent files. You can view the result of this operation on the respective log entry.

*WB076 added:*
FileCopy of a single file gives a warning in the log, if the destination file already exists.

*WB078 added:*
If there is a parameter _{{{PRESERVE}}}_ added, FileCopy of a single file does not overwrite an existing file. A warning is still given.
The warning can be suppressed by an additional parameter _{{{NOWARN}}}_

The parameters PRESERVE, and NOWARN can be used simultaneously. The order does not matter.

====Syntax example:====
FileCopy,c:\MyPath\myText.txt,c:\AnotherPath,PRESERVE 

====Wildcards====
FileCopy supports wildcards like *. * , win*.dll.

Then the command will copy all suited files and respective sub folders from a given source to a specified destination directory.
In case of using wildcars the warning mechanism is switched off.

Trying do copy wildcard source to a destination file raises an error.

*WB078 added:*
In case of wildcards optionally parameters can be defined: SHOW: The progressbar shows single file processing, and the actual copied file name is shown. NOREC: Only all suited files of the initial folder are copied. No recursion into subdirectories.

The parameters SHOW  and NOREC can be used simultaneously. The order does not matter.

====Syntax example:====
FileCopy,c:\MyPath\*.txt,c:\AnotherPath

On this example FileCopy will copy all text files (*.txt) from MyPath and it's subdirectories to AnotherPath 

.

----

=FileDelete==
*{{{FileDelete,<FileToDelete> }}}*
This command will delete files. It uses Win32 API as a silent operation deleting all files that match the search criteria. You can view the result of this operation on the respective log entry. Beware that all deleted files are immediately removed instead of moved to the recycle bin.

FileDelete supports wildcards ( *. * ) 

Syntax example:
FileDelete,c:\MyPath\*.txt

In this example FileDelete will delete all text files (*.txt) from MyPath

FileRename

FileRename,<OldFilename>,<NewFilename> 
This command will rename a single file

Syntax example:
FileRename,c:\MyPath\myTextFile.txt,c:\MyPath\myOldTextFile.txt

In this example FileRename will rename c:\MyPath\myTextFile.txt to another filename as myOldTextFile.txt 

FileCreateBlank

FileCreateBlank,<NewFile> 
This command simply creates a new empty file with the filename you specify. If a file with the same filename already exists it will be overwritten.


WB078 added:
FileCreateBlank gives a warning in the log, if the destination file already exists.
If there is a parameter PRESERVE added, FileCreateBlank does not truncate an existing file. A warning is still given
The warning can be suppressed by an additional parameter NOWARN

The parameters PRESERVE, and NOWARN can be used simultaneously. The order does not matter.

Syntax example:
FileCreateBlank,c:\MyPath\MyNewFile.txt

In this example FileCreateBlank will create an empty file called MyNewFile.txt 

FileByteExtract

FileByteExtract,<FilesToSearch>,<OutputFile>,<ByteSignature>,<BytesLength> 
This is a command with a very specific function. It will look inside all files that match the search criteria for a specific byte signature.

Byte signatures are specified in groups of two digits that are expressed in hexadecimal format. Possible value range from combinations starting at 00 and ending at FF

If this byte sequence is found, then it will copy a specific number of bytes and save them as a new file.

The bytes that compose the signature are also the header bytes on the new file.

This command was originally designed to find a byte sequence inside some system files that contained resources. Please look in the forums for practical examples of usage.

Syntax example:
FileByteExtract,c:\MyPath\*.*,c:\MyPath\NewFile.bin,001122334455,1440000

In this example, if a match is found then a new file will be created with the size specified in BytesLength

DirCopy

DirCopy,<FromDir>,<ToDir> 
This command will copy a folder and respective sub folders from a given source to a specified destination. It uses Win32 API as a silent operation overwriting any previously existent folder.

Syntax example:
DirCopy,c:\MyPath,c:\AnotherPath

In this example DirCopy will copy the complete directory MyPath to AnotherPath

DirCopy,c:\MyPath\*.*,c:\AnotherPath

In this example DirCopy will copy all files and directories inside MyPath to AnotherPath


WB078 added:
The optional parameter SHOW can be added. That will open the Windows internal progress window.

DirDelete

DirDelete,<DirToDelete> 
This command will delete a folder and respective files and folders inside. It uses Win32 API as a silent operation to delete the specified folder. Beware that deleted folders are not recoverable from the recycle bin.

Syntax example:
DirDelete,c:\MyPath

In this example DirDelete will remove MyPath
WB076 added:
The optional parameter FAST can be added. That will rename the directory to a random name, and then delete in the background.

DirMove

DirMove,<MoveDir>,<ToDir> 
This command will move a folder and respective sub folders from a given source to a specified destination. It uses Win32 API as a silent operation overwriting any previously existent folder.

The previous location ceases to exist with this folder being found under the new location

Syntax example:
DirMove,c:\MyPath,c:\AnotherPath

In this example DirMove will move MyPath to AnotherPath 

DirMake

DirMake,<NewDir> 
This command will create a new folder as you specify.

Syntax example:
FileCreate,c:\MyPath

In this example FileCreate will add a new directory called MyPath 

CopyOrExpand

CopyOrExpand,<FileToCopyOrExpand>,<DestinationFolderOrFilename> 
This is a very flexible command that is designed for cases where we can either need to Copy or Expand a file.

It was implemented to ease the task of copying files from Install CD's where often a specified can be present either in normal format or compressed.

These compressed files use the cabinet archiving method and usually have an identifiable _ as the last character on their extensions. (e.g. myFile.Tx_ ). When this file is expanded a new file with a full extension is retrieved.

DestinationFolderOrFilename means that you can either specify a folder where this file will be placed with the original (expanded) filename or new filename that you prefer. 
Syntax example:
CopyOrExpand,c:\MyPath\myTextFile.txt,c:\MyPath\myNewerTextFile.txt

In this example CopyOrExpand will first try to find a file c:\MyPath\myTextFile.txt and if it is not found then it will look for c:\MyPath\myTextFile.tx_ and expand this file if successfully found. WB078 added:
CopyOrExpand gives a warning in the log, if the destination file already exists.
If there is a parameter PRESERVE added, CopyOrExpand of a single file does not overwrite an existing file. A warning is still given
The warning can be suppressed by an additional parameter NOWARN

The parameters PRESERVE, and NOWARN can be used simultaneously. The order does not matter.

Expand

Expand,<CABfile>,<DirToDecompress> 
This command will decompress all files inside CABfile to the folder you specify.

Cabinet files usually use extension .CAB

Syntax example:
Expand,c:\MyPath\MyFile.cab,c:\MyNewPath

In this example Expand will try to expand all files found inside c:\MyPath\MyFile.cab to the folder c:\MyNewPath
WB078 added:
A single file can be extracted from the cab file, by giving it's name as third parameter

Syntax example:
Expand,c:\MyPath\MyFile.cab,c:\MyNewPath,YourFile.dll

Expand of a single file gives a warning in the log, if the destination file already exists.
If there is a parameter PRESERVE added, Expand of a single file does not overwrite an existing file. A warning is still given
The warning can be suppressed by an additional parameter NOWARN

The parameters PRESERVE, and NOWARN can be used simultaneously. The order does not matter.