<wiki:toc max_depth="4" />
=Scripts=

Script files use a very simple to understand language to run their commands and actions. In general terms these files use the extension .script and can be edited with any text editor or using the internal editor from WinBuilder. 

Settings are written in the form of Key=Value (e.g. Color=Blue) and these values are kept inside sections similar to the structure of an `*.ini` file (e.g. [MySection]).

In general, the syntax is very simple - i.e. keywords for functions with the parameters separated by commas.  Comment lines start with two slashes, and are skipped during processing. Out of compatibility concerns two hash marks are accepted as comment marker.
 Example:
{{{
// This is a comment line
## This is a comment line, too
}}}

You can also add additional files inside your scripts. These files are stored as attachments in a process very similar to the way email messages used to include binary files - i.e. they are "encoded" into an ASCII format. This way you can share your scripts in discussion forums with all the needed tools inside.

==Syntax Rules and Escape Characters==

First some rules: 
 # !WinBuilder Script Line Parameters are separated by a comma. If a comma is inside an argument, it must be 'escaped' by `#$c` 
 # Besides some special cases (e.g. parameters in ShellExecute?) generally enclosing quotes are not needed. 
 # Enclosing quotes MUST be used if the !WinBuilder Script Line Parameters contain spaces. 

Since there are times when the comma or quote need to be used inside a string or parameter, !WinBuilder has a character escape mechanisim. The following are the available escape characters: 
 * `#$c` - Comma (`'`)
 * `#$p` - Percent (`%`) 
 * `#$q` - Double quotes (`"`)
 * `#$s` - Space (` `)
 * `#$x` - Newline (`<cr/lf>`)
 * `#$z` - String separator (i.e. the unicode 0 which is only used by the !RegWriteBin command )

Here is a short explanation of what can be done and what cannot be done and when the escaped characters should be used.
   * If the spaces are replaced by the escape #$s, the enclosing quotes should be omitted. 
   * In most cases user violation of the rules are accepted by !WinBuilder and processed as assumed. E.g. unnecessary enclosing quotes or a comma inside an item enclosed by quotes.

But sometimes that can bring unexpected results. Let me give an Example:

*`Item1,item2`* is understood as two items, separated by the comma.  *`Item1#$citem2`* and *`"Item1,item2"`* are both correctly written as *ONE* item with the comma inside.

Now the problem occurs when it is not possible to determine what is meant.  For example, *`Set,%Var%,"Item1","item2"`* cannot be understood uniquely by WinBuilder?. Let's exchange the English understandable words by the character 'x'

*`"xxxxx","xxxxx"`*

 * Are there two quote-enclosed xxxxx, separated by a comma? 
 * Or is there on long string of 10 xes, interrupted by a nested quote pair containing a comma? 
 * Or is there on long string of 10 xes, interrupted by a nested quote pair 'escaping' a comma? > Set,%var%,xxxxx#$cxxxxx

You see how important it is to follow the rules, even if !WinBuilder understands most violations correctly.

==Script Files==
Script files can perform both specific and generic functions. Some scripts will be responsible for creating the base structure of the project while others will be used to add extra functionality and programs.

These scripts can also use a very specific model that only works on a single project and cannot be successfully used on another project unless it also shares the same model as the original project from where it came. The model consists of functions and variables stored in scripts.

Let's start by looking at the structure of a typical script file.
We use sections to group commands and settings inside script files. The easiest way to see how they are applied is to edit a few scripts and look at the source code to learn more about them.

===File Structure===

A typical script is composed of at least these 3 important sections
 # Main - will keep all details that identify your script
 # Variables - used to keep variable values
 # Process - where your commands are placed

In addition to the script files, there is a master project file called Script.project, which has two optional sections
 * OnProcessEntry - run as first command of every script
 * OnProcessExit - run as last command of every script

Here is a small example of how it should look:
{{{
[Main]
Title=Add my Program
Description=This script will add my program
Level=5

[Variables]
%myTitle%="This is a title for the program"

[Process]
echo,%myTitle%
....
....
}}}

We can additionally use more sections to add variables from the script interface or even specify more sections with commands to be processed. 

===The `[Main]` section===

Inside this main section you can store the definitions that identify your script and allow it to be properly categorized inside the project. This section works like a normal INI section where you write all your data in the form of Key=Value (e.g. Color=Blue) 

List of available keys
 * Title - Title that is displayed by your script
 * Description - a short description of what the script is intended to do
 * Author - the author or group involved in the initial release, following releases or branches should be mentioned in Credits
 * Credits - details the people involved making the script possible or persons involved in updating the work.
 * Date - date of changes, any text is accepted - recommended to use "Year-Month-Day" all written in numeric format
 * Version - scripts support version and they are important to mark new updated scripts on the download center
 * Website / topic discussion - place a link here to help users to find their way to a site with more informations
 * Download_level - used by download center to categorize scripts under download profiles (1..4)
 * Selected - using True/False will make your be checked or not for being processed. Place a Selected=none to completely remove any checkbox
 * Locked - use True/False to allows the users to edit the script interface 
 * Level - very important setting to allow your script to be placed on the correct sequence when the project is running (see [wbscriptlevels#Script_Levels Script Levels] for more details on this)

All of these keys can be edited easily using !WinBuilder's internal editor. While these keys are optional, it is recommended to place at least a few keys to better describe your script to others (i.e. `Title` and `Description`)

Some keys are assumed with default values if they are not found inside the script
||Title||Display the filename||
||Level||5||
||Profile||Recommended (value=2)||


===The `[Variables]` section===

This section is described in more detail [wbscriptvariables here]


===The `[Process]` section===

All commands you write in this section will be executed by the program. 
From this section you can also call other sections from the same script or other scripts if necessary using the [wbrun run command].

The result of each operation is written on the log window - which you can later view or save to an html page. 


===The `[Interface]` section===
While this is important to scripts we'll be referring to it in another chapter.


===The `[OnProcessEntry]` section===

This section is an optional secial section exclusive in script.project. If it is present, during build this section is processed before the first `[Process]` line of every processed script.


===The `[OnProcessExit]` section===

This section is an optional special section exclusive in script.project.
If it is present, during build this section is processed after the last `[Process]` line of every processed script. For example, this will cause a specific section of the `project.script` file to be run when the build process exits.
{{{
[OnProcessExit]
Run,%ProjectDir%\script.project,Process-log 
}}}

<br>
----
----

==Script Command Categories==

All available commands are described on a single page so that you can later print that page to use as a reference. 
 * Usually all command which compare etc. are case insensitive.
 * There are some commands having a "X" at the end. These commands work like that ones without the "X", but case sensitive. 
<br>
----
----
===File operations===
Commands under this category were designed to handle files and are particularly useful to create the base structure of your project or add additional features that you need.

List of available functions
 * [filecopy FileCopy]
 * [filedelete FileDelete]
 * [filerename FileRename]
 * [filecreateblank FileCreateBlank]
 * [filebyteextract FileByteExtract]
 * [dircoopy DirCopy]
 * [dirdelete DirDelete]
 * [dirmove DirMove]
 * [dirmake DirMake]
 * [copyorexpand CopyOrExpand]
 * [expand Expand]

<br>
----
----
===Registry handling===

These commands are written to write and read values from the local registry on your windows machine. You can also load the hives from the projects being built at any given time.

These registry operations are valid for any Windows Platform, you should however note that Vista (and later versions of windows) restricts the specific operation to load/unload hives - it is necessary to disable the UAC (User Account Control) before running projects that need this support.

List of available functions
 * [regwrite RegWrite]
 * [regread RegRead]
 * [regdelete RegDelete]
 * [reghiveload RegHiveLoad]
 * [reghiveunload RegHiveUnload]
 * [regimport RegImport]

<br>
----
----
===INI manipulation===

This category contains commands that were created to work with INI based text files. INI files group information using a few rules, it is also very easy to understand and edit when needed.

We use INI files to exchange information between scripts or store data whenever needed. In most cases INI language files use extension .ini - but our commands are not limited to just this type of extension and can be used on any text file that uses a INI derivated language like .script language.

Quick explaintion of some INI concepts:
 * A group of data (section) is always contained between [] (e.g. [MySection] ) and will only finish whenever another section is found or when the file has no more lines to read.
 * Each entry has a Title and is followed by it's respective data. Both are separated by an equal sign (e.g. Color=Blue)

Available INI functions
 * [iniwrite IniWrite]
 * [iniread IniRead]
 * [inidelete IniDelete]
 * [iniaddsection IniAddSection]
 * [inideletesection IniDeleteSection]
 * [iniwritetestline IniWriteTextLine]
 * [inimerge IniMerge]

<br>
----
----
===Attachments ===

Attachments are files that can be included inside your script.

Since script files are meant to be edited by any text editor, these files are encoded into ascii text. This method allows you to add small files along with your scripts in order to keep everything together.

While a script is running you can use some of the following commands to best take advantage of this feature.

List of related commands
 * [extractfile ExtractFile]
 * extractandrun ExtractAndRun]
 * [extractallfiles ExtractAllFiles]
 * [extractallfilesifnotexist ExtractAllFilesIfNotExist]
 * [encode Encode]

<br>
----
----
===Text Files===

With this set of commands we can handle text files and modify them as needed. All these commands can be applied to either a single or multiple file using wildcards.

Description of commands
 * [txtaddline TxtAddline]
 * [txtreplace TxtReplace]
 * [txtdelline TxtDelLine]
 * [txtdelspaces TxtDelSpaces]
 * [txtdelemptylines TxtDelEmptyLines]


<br>
----
----
===IF Clauses and Command Blocks===
If the evaluation of an If condition is 'True', the command following the condition is processed. If the evaluation of an If condition is 'False', the command of the Else command (if present), is processed.
In both cases, instead of a command, there can also be a command block.


<br>
----
----
 * Retrieve functions
Retrieve Functions 

This set of functions will enable you to get some specific values when running your script.

They can be grouped as 
 * FolderSize/FileSize
 * File/Dir
 * MD5

WB076 added:
 * FileVersion




<br>
----
----
 * String format


<br>
----
----
===Network tools===

Functions on this category allow you to work with the network environment whenever available.
 * [webget WebGet]
 * [webgetifnotexist WebGetIfNotExist]


<br>
----
----
===Miscellaneous Commands ===

Under this category you find the commands which aren't grouped under any specific category but are still quite used on most scripting tasks.
 * [run run / exec - runs a section from a script file]
 * [shellexecute - launches an external file
 * [beep beep - uses the system speaker]
 * [message message - outputs a message window]
 * [system system - used to refresh values on the program itself]
 * [echo echo - outputs a message (viewable on the log)]
 * [wait wait - "sleeps" the script for specified time]
 * [exit exit - stops processing current script]
 * [halt halt - stops building the whole project]
 * [set set - changes the value of a variable]
 * [addvariables addvariables - adds all variables listed inside a section]

WB076 added:
 * [loop Loop]





<br>
<br>
----
----
==Bugs ==
When a command doesn't work as expected you should follow these steps to ensure that it is a true bug and not a human error:
 * Check the source code and see if the syntax is correct
 * Add small tests to the used variables to check if the respective values are outputted correctly. (ex. echo,%myVariable%)
 * Read the special conditions under which the project has to be run (found the project page)
 * Check if there aren't any external interferences as locked files or no disk space on the target folder
 * Try whenever possible from a fresh project to avoid any chance of corrupted files or invalid project settings

If none of the above solves your issue then here's the recommended way to proceed:
 * Visit the community forums and search for similar reports of the same behavior as you notice
 * If a similar case is found you should post a reply on this topic, otherwise start a new topic in the appropriate category
 * Writing advice before posting a bug : Include a descriptive title in your message including your log.html file and a test script so that it can be debugged and used by others

Log of changes 
 * Changes in script language can be followed in each newer WinBuilder beta discussion where changes to the script code are suggested and debugged by other members. 
 * Projects also follow their own script rules and these methods can change occasionally, whenever in doubt you should post your questions in each project forum discussion.
 * Please let us know if this page is not complete or if you still haven't found needed information.
